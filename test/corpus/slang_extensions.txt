================================================================================
Simple vertex shader
================================================================================

[shader("vertex")]
float4 vertexMain(
    float3 modelPosition : POSITION,
    uint vertexID : SV_VertexID,
    uniform float4x4 mvp)
    : SV_Position
{ /* ... */ }

--------------------------------------------------------------------------------

(translation_unit
  (function_definition
    (hlsl_attribute
      (call_expression
        (identifier)
        (argument_list
          (string_literal
            (string_content)))))
    (type_identifier)
    (function_declarator
      (identifier)
      (parameter_list
        (parameter_declaration
          (type_identifier)
          (identifier)
          (semantics
            (identifier)))
        (parameter_declaration
          (type_identifier)
          (identifier)
          (semantics
            (identifier)))
        (parameter_declaration
          (qualifiers)
          (type_identifier)
          (identifier)))
      (semantics
        (identifier)))
    (compound_statement
      (comment))))

================================================================================
Type inference
================================================================================

main() {
  var a = 1; // OK, `a` is an `int`.
  var b = float3(0, 1, 2); // OK, `b` is a `float3`.
  var a : int = 1; // OK.
  var b : int; // OK.
  let a = 5; // OK, `a` is `int`.
  let b : int = 5; // OK.
}

--------------------------------------------------------------------------------

(translation_unit
  (function_definition
    (function_declarator
      (identifier)
      (parameter_list))
    (compound_statement
      (declaration
        (placeholder_type_specifier)
        (init_declarator
          (identifier)
          (number_literal)))
      (comment)
      (declaration
        (placeholder_type_specifier)
        (init_declarator
          (identifier)
          (call_expression
            (identifier)
            (argument_list
              (number_literal)
              (number_literal)
              (number_literal)))))
      (comment)
      (declaration
        (placeholder_type_specifier)
        (init_declarator
          (type_hinted_declarator
            (identifier)
            (type_hint
              (primitive_type)))
          (number_literal)))
      (comment)
      (declaration
        (placeholder_type_specifier)
        (type_hinted_declarator
          (identifier)
          (type_hint
            (primitive_type))))
      (comment)
      (declaration
        (placeholder_type_specifier)
        (init_declarator
          (identifier)
          (number_literal)))
      (comment)
      (declaration
        (placeholder_type_specifier)
        (init_declarator
          (type_hinted_declarator
            (identifier)
            (type_hint
              (primitive_type)))
          (number_literal)))
      (comment))))

================================================================================
Interfaces
================================================================================

interface IFoo
{
    int myMethod(float arg);
};

--------------------------------------------------------------------------------

(translation_unit
  (interface_specifier
    (type_identifier)
    (field_declaration_list
      (field_declaration
        (primitive_type)
        (function_declarator
          (field_identifier)
          (parameter_list
            (parameter_declaration
              (primitive_type)
              (identifier))))))))

================================================================================
Generics
================================================================================

int myGenericMethod<T: IFoo>(T arg)
{
    return arg.myMethod(1.0);
}

--------------------------------------------------------------------------------

(translation_unit
  (function_definition
    (primitive_type)
    (function_declarator
      (template_function
        (identifier)
        (template_argument_list
          (type_descriptor
            (type_identifier))
          (interface_requirements
            (identifier))))
      (parameter_list
        (parameter_declaration
          (type_identifier)
          (identifier))))
    (compound_statement
      (return_statement
        (call_expression
          (field_expression
            (identifier)
            (field_identifier))
          (argument_list
            (number_literal)))))))

================================================================================
Is/as operator
================================================================================
void main() {
  bool t = foo is MyImpl; // true
  Optional<MyImpl> optV = foo as MyImpl;
}
--------------------------------------------------------------------------------

(translation_unit
  (function_definition
    (primitive_type)
    (function_declarator
      (identifier)
      (parameter_list))
    (compound_statement
      (declaration
        (primitive_type)
        (init_declarator
          (identifier)
          (binary_expression
            (identifier)
            (identifier))))
      (comment)
      (declaration
        (template_type
          (type_identifier)
          (template_argument_list
            (type_descriptor
              (type_identifier))))
        (init_declarator
          (identifier)
          (binary_expression
            (identifier)
            (identifier)))))))

================================================================================
Extensions
================================================================================
extension MyObject : IBar, IBar2
{
    float bar() { return 1.0f }
    float bar2() { return 2.0f }
};
--------------------------------------------------------------------------------

(translation_unit
  (declaration
    (type_identifier)
    (type_hinted_declarator
      (identifier)
      (type_hint
        (type_identifier)))
    (identifier)
    (MISSING ";"))
  (compound_statement
    (function_definition
      (primitive_type)
      (function_declarator
        (identifier)
        (parameter_list))
      (compound_statement
        (return_statement
          (number_literal)
          (MISSING ";"))))
    (function_definition
      (primitive_type)
      (function_declarator
        (identifier)
        (parameter_list))
      (compound_statement
        (ERROR
          (number_literal))))
    (expression_statement)
    (MISSING "}")))
